[include print_macros.cfg]
[include shell_macros.cfg]
[include smart_park.cfg]
[include voron_purge.cfg]

[gcode_macro ECHO_CUSTOM_VARS]
description: Echo custom variables to the console.
gcode:
	{% for var, value in printer["gcode_macro _custom_vars"].items() %}
		{action_respond_info(var ~ ": " ~ value)}
	{% endfor %}

[gcode_macro _custom_vars]
description: Custom variable storage macro, will echo variables to the console when run.
variable_is_kinematic_position_overriden: False
# The following variables are for loading and unloading of filament.
variable_filament_unload_length: 100
variable_filament_unload_speed: 5
variable_filament_load_length: 100
variable_filament_load_speed: 3
# The following variables are for adjusting adaptive purge settings for KAMP.
variable_purge_height: 0.8                  # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 0                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_margin: 10                   # Distance the purge will be in front of the print area, default is 10.
variable_purge_amount: 30                   # Amount of filament to be purged prior to printing.
variable_flow_rate: 12                      # Flow rate of purge in mm3/s. Default is 12.
# The following variables are for adjusting the Smart Park feature for KAMP, which will park the printhead near the print area at a specified height.
variable_smart_park_height: 10              # Z position for Smart Park, default is 10.
gcode:
	ECHO_CUSTOM_VARS

[gcode_macro BEEP]
description: Make some noise with this small beeping thing.
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.
    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}
    
[gcode_macro FORCE_XYZ10]
description: FOR DEBUGGING PURPOSES ONLY. Sets the internal printer kinematic state to 10 on all axes regardless of actual physical position.
gcode:
    RESPOND MSG="WARNING: ONLY USE FORCE_XYZ FOR DEBUGGING PURPOSES. YOU'RE OVERRIDING THE INTERNAL POSITIONING STATE OF THE PRINTER. PROCEED WITH CAUTION AND DO A PROPER G28 WHEN DONE."
    SET_GCODE_VARIABLE MACRO=_custom_vars VARIABLE=is_kinematic_position_overriden VALUE=True
    {% set z = params.Z|default(10) %}
    {% set y = params.Y|default(10) %}
    {% set x = params.X|default(10) %}
    SET_KINEMATIC_POSITION Z={z} Y={y} X={x}

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
	SAVE_GCODE_STATE NAME=unload_state
	G91
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
		M117 Heating...
		# Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
		M104 S{params.TEMP|default(220, true)}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	{% set unload_speed = printer["gcode_macro RatOS"].filament_unload_speed|float * 60 %}
	{% set unload_length = printer["gcode_macro RatOS"].filament_unload_length|float %}
	M117 Unloading filament...
	# Extrude a bit
	G0 E10 F300
	# Extract filament to cold end area 
	G0 E-5 F3600
	# Wait for three seconds
	G4 P3000
	# Push back the filament to smash any stringing 
	G0 E5 F3600
	# Extract back fast in to the cold zone 
	G0 E-15 F3600
	# Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
	G0 E-{unload_length} F{unload_speed}
	M117 Filament unloaded!
	RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
	SAVE_GCODE_STATE NAME=load_state
	G91
	# Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
		M117 Heating...
		M104 S{params.TEMP|default(220, true)}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	{% set load_speed = printer["gcode_macro RatOS"].filament_load_speed|float * 60 %}
	{% set load_length = printer["gcode_macro RatOS"].filament_load_length|float %}
	M117 Loading filament...
	# Load the filament into the hotend area.
	G0 E{load_length} F{load_speed}
	# Wait a secod
	G4 P1000
	# Purge
	G0 E40 F100
	# Wait for purge to complete
	M400
	M117 Filament loaded!
	RESPOND MSG="Filament loaded!"
	RESTORE_GCODE_STATE NAME=load_state
    
[gcode_macro Middle]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                
    G0 X125 Y105 Z25 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    SET_PIN PIN=caselight VALUE=0       ; turn case light off

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description: Generates resonance graph used to ensure belts are equally tensioned.
gcode:
    TEST_RESONANCES CHIP=rpi AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
    TEST_RESONANCES CHIP=rpi AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
    RUN_SHELL_COMMAND CMD=generate_belt_tension_graph
    RESPOND MSG="Belt tension graphs generated. You'll find them in the input_shaper folder in the machine tab!"

[gcode_macro GENERATE_SHAPER_GRAPHS]
description: Genarates input shaper resonances graphs for analysis. Uses the AXIS parameter for if you only want to do one axis at a time, (eg. GENERATE_SHAPER_GRAPHS AXIS=X)
gcode:
    {% if params.AXIS is defined %}
        {% if params.AXIS|lower == 'x' %}
            MAYBE_HOME
            TEST_RESONANCES CHIP=rpi AXIS=X
            RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
            RESPOND MSG="Input shaper graph generated for the X axis. You'll find it in the input_shaper folder in the machine tab!"
        {% elif params.AXIS|lower == 'y' %}
            MAYBE_HOME
            TEST_RESONANCES CHIP=rpi AXIS=Y
            RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
            RESPOND MSG="Input shaper graph generated for the Y axis. You'll find it in the input_shaper folder in the machine tab!"
        {% else %}
            {action_raise_error("Unknown axis specified. Expected X or Y.")}
        {% endif %}
    {% else %}
        MAYBE_HOME
        TEST_RESONANCES CHIP=rpi AXIS=X
        TEST_RESONANCES CHIP=rpi AXIS=Y
        RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
        RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
        RESPOND MSG="Input shaper graphs generated for X and Y. You'll find them in the input_shaper folder in the machine tab!"
    {% endif %}

[gcode_macro _servo_test_angle]
gcode:
	{% set ANGLE  = params.ANGLE|int %}
    SET_SERVO SERVO=klicky_servo ANGLE={ANGLE}
    G4 P250
    SET_SERVO SERVO=klicky_servo WIDTH=0.0
